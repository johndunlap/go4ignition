#!/bin/bash

TMP_DIR=$(mktemp -d)

# No one knows why this works except Mozart, and he's dead.
function snake_to_camel() {
    perl -pe 's#(_|^)(.)#\u$2#g' <<< "$1"
}

# Define a cleanup function
cleanup() {
    rm ${TMP_DIR} -rf
}

# Set the trap to call cleanup on exit
trap cleanup EXIT

# Abort if we're in the wrong folder or if the expected folder does not exist
if [ ! -d 'template' ]; then
  echo "template directory does not exist"
  exit 1
fi

TEMPLATE_GO="${TMP_DIR}/template.go"
rm -f ${TEMPLATE_GO}

TEMPLATE_MAP_GO="${TMP_DIR}/template-map.go"
rm -f ${TEMPLATE_MAP_GO}

TEMPLATE_HANDLER_GO="${TMP_DIR}/template-handler.go"
rm -f ${TEMPLATE_HANDLER_GO}

cat <<EOF >> ${TEMPLATE_GO}
// Generated by gentemplate.sh
package main

import (
	_ "embed"
  "net/http"
)

EOF

FILES_TXT=${TMP_DIR}/files.txt
find template/ -type f > ${FILES_TXT}
find template/ -type f > ${FILES_TXT}

echo "// TemplateContents generated bindings for template files" >> ${TEMPLATE_MAP_GO}
echo "var TemplateContents = map[string][]byte{" >> ${TEMPLATE_MAP_GO}

for FILE in `cat ${FILES_TXT}`; do
  FILE_EXTENSION="${FILE##*.}"
  DIRNAME=$(dirname ${FILE})

  # Bind the files to go variables
  echo "//go:embed ${FILE}" >> ${TEMPLATE_GO}
  MD5=$(md5sum ${FILE} | awk '{print $1}')
  VAR_NAME="md5${MD5}"
  echo "var ${VAR_NAME} []byte" >> ${TEMPLATE_GO}
  echo >> ${TEMPLATE_GO}

  # Expose the values of the go variables through a map
  echo "  \"${FILE}\": ${VAR_NAME}, // ${FILE}" >> ${TEMPLATE_MAP_GO}
done
echo "}" >> ${TEMPLATE_MAP_GO}

echo -e "\n// TemplateHandlers generated handler bindings" >> ${TEMPLATE_HANDLER_GO}
echo "var TemplateHandlers = map[string]func(res http.ResponseWriter, req *http.Request){" >> ${TEMPLATE_HANDLER_GO}

OWD=$(pwd)
cd template
find -name "*.html" -type f > ${FILES_TXT}
cd ${OWD}

for RAW_FILE in `cat ${FILES_TXT}`; do
  FILE=$(echo $RAW_FILE | sed 's/\.\///g' | sed 's/\/index.html//g' | sed 's/.html//g')
  TEMPLATE_FILE=$(echo ${RAW_FILE} | sed 's/\.\//template\//g')

  echo "${RAW_FILE}" | grep fragment 1>/dev/null 2>&1
  if [ $? -eq 0 ];then
    continue
  fi

  if [ "index" == "${FILE}" ]; then
    HANDLER_NAME="IndexHandler"
    echo "  \"/\": ${HANDLER_NAME}," >> ${TEMPLATE_HANDLER_GO}
  else
    HANDLER_NAME="$(snake_to_camel "$(echo ${FILE} | sed 's/[/_]/_/g')")Handler"
    echo "  \"/${FILE}\": ${HANDLER_NAME}," >> ${TEMPLATE_HANDLER_GO}
    echo "  \"/${FILE}/\": ${HANDLER_NAME}," >> ${TEMPLATE_HANDLER_GO}
  fi

  grep -F "func ${HANDLER_NAME}(res http.ResponseWriter, req *http.Request) {" handler.go > /dev/null
  STATUS=$?

  if [ $STATUS -ne 0 ];then
    cat <<EOF >> handler.go

// ${HANDLER_NAME} HTTP handler for URI /${FILE}
func ${HANDLER_NAME}(res http.ResponseWriter, req *http.Request) {
  SetHeaders(res, req)

	data := NewPageData("", req)
	data.IncludeHeader = IsHTMX(req)

  err := tmpl.ExecuteTemplate(res, "${TEMPLATE_FILE}", data)
  if err != nil {
    println("ERROR: " + err.Error())
  }
}
EOF
  fi
done

echo "}" >> ${TEMPLATE_HANDLER_GO}

# Construct the final output
cat ${TEMPLATE_MAP_GO} >> ${TEMPLATE_GO}
cat ${TEMPLATE_HANDLER_GO} >> ${TEMPLATE_GO}
cp ${TEMPLATE_GO} .
